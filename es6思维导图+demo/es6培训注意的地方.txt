第一期：es6语法

1、es6演变过来的历程
2、es6与es5语法的区别   结合案例
3、真实项目的案例，再用es6语法怎么写，现场写。
4、现场出思考题，其他人思考，还有最后出一道思考题，  下一期配需需要讲的内容
5、页面调试，只以谷歌为例，谷歌支持es6，哪些支持，哪些不支持。不支持转换es5，再调试
6、

第二期：es5的原型继承、es6的类  是什么样的关系？   模块开发？

1.复习es5的原型继承
2.讲完出一道题目，让他们想。
3.es6的类，将完出一道思考题
4.


第一期：
1、讲解es6的来源
2、讲let，直接在chrome控制台敲代码，写案例，然后可以直接在控制台输出，出案例  执行结果
3、讲解map时，查看chrome的map所有方法，属性。用xmind思维导图清晰讲解，配合demo，再结合es6转换为es5语法。查看转换后的效果。


缺少：综合案例。



没有写ppt，promise、class、module3块内容没有写完

思考题没有写




备注：将xmind转换图片，提供查看。
第一章：let、const
   1.每讲一条数据，敲一次代码。
   2.const比let多了1条限制。
   3.const对对象或数组时，数组也是对象。指向的都是一个地址。
   4.循环拓展map。
   5.箭头函数：没有参数或多个参数加括号,无返回值时，代码用{}包括
   6.
第二章：解构赋值
   1.在解构规则时，undefined或null时，在后面演示下报错 let {prop:x}=null;
   2.数组解构：数组两边结构相同，右边多余的值不管。
     右边不是字符串，不报错，因为下面还有字符串解构呢。
   3.对象解构：注意点：let{foo:foo}在此处就声明了。提前再次声明报错。
   4.数值布尔解构：********有问题
   5.函数解构：参数是对象，[x,y]换成{x,y}；返回值，在模块中用，返回多个值时。 
	demo仔细点move2是等号右边变量赋值。
             第一个move1  { x = 0, y = 0 } = {}  去掉={}  在move1()会报错。
            因为赋值操作：  讲上面的，先说下面的简单案例
            例 function fun(a=1){
                 console.log(a);
            }
            fun(3);//输出3 不是1

第三章：字符串
   1.查看字符串扩展了什么方法  includes() startsWidth() endsWith() repeat()
   2.
第四章：数值
第五章：数组
   1.Set和Map后面讲
   2.扩展运算符，后续讲
   3.数组的map方法，写一个案例
   4.Array.of方法：ES5一个数字和3个数字，有区别，ES6就都是转为数组
   5.查找数组成员：indexOf  lastIndexOf方法  
      如果在某些浏览器不支持indexOf方法，可以添加数组的indexOf方法
   6.数组的values()在现有浏览器中报错，查看Array.prototype,是否有values方法
   但是Object.values([1,2,3])可以拿到value值
   7.*********
     用0能判断数组是否有空位。0 in [1]
     数组的空位，ES5哪些会忽略空位
    
   8.扩展运算符：下一节函数里面讲









第一讲补充：
全局作用域和块级作用域：
let c=1;  window.c 为undefined，表示不是全局作用域，没有在window对象下






第六章：函数
   1.参数默认值，function f(a){var a=1;}//不报错，var改成let报错
   2.函数length属性不包含rest参数，也不包含默认赋值的值

   2.箭头函数：
      this指向问题：es5：指代的是当前调用的对象。
      let c=function(){
		setTimeout(()=>{
			console.log(this);
		},100);
	}
	c();//此问题重要。
      定义对象方法时，在上面讲过了
      对象原型里面的this，指向window问题。
      语句较短时：通过ES5来分解
   3.尾调用函数 *******  有一张图。。
      return g(x)+1不是尾调用。
第七章：对象
   1.属性名表达式，ES6，不允许使用.操作符，因为.后面是key值是字符串
   2.Object.is()2个特殊与ES5刚好相反

   3.Object.assign()，处理数组,非常好用的一个属性。
     克隆对象：不能克隆原型链上的方法和属性。先获取原型链的方法，在把point方法和属性复制过来。
     怎么保持原型链？？？？
   4.对象属性的遍历**************


第八章：Symbol


第九章：Proxy
   1.拦截的含义，是一个构造函数，用new命令
   2.在讲最后一个分享数据案例，以原型的共享数据为例，

第十章：Set
   1.ES6提供了一种新的数据结构，是构造函数，用new命令。类似于数组。
      看下Set有哪些方法和属性： Set.prototype查看
      new Set()里面放值必须是数组，如果是对象报错。数组里面可以为对象。
      再讲基本用法
   2.数组的filter方法  [1,2,3,4,5].filter(x=>x>3);
第十一章：Map
   1.在讲第一个var map=new Map(。。。);  说下typeof map==="object"
   2.基本用法：注意key值用===定义，map.set("1",333);设置的值为新值
      即key为1和"1"是不同的。
      可以使用链式写法。
      如果是数组或对象，只有针对同一个对象的引用，Map结构视为同一个键值。
   3.内存地址：内存物理地址，0X123456
   4.讲map转json时，for...of循环，可以同时获取key和value值
   4.json格式有2种：1种是对象形式，1种是数组形式（用得比较少）
第十二章：Iterator for...of
1、4中数据结构只有Object没有Symbol.iterator接口，对象需要手动添加。其他不需要
2、任何数据结构，只要部署了Iterator接口，就可以完成遍历操作


1、任意一个对象的 Symbol.iterator 属性，等于该对象的遍历器函数，即调用该函数会返回该对象的一个遍历器。遍历器本身也是一个对象，它的 Symbol.iterator 属性执行后，返回自身。
第十三张：Generator
1、Generator函数是一个状态机，
function* hello(){
  yield 'hello';
  yield "world";
  return "ending";
}
var hw=hello();
hw.next();
在第三次hw.next()时，返回值是 {value:"ending",done:true}，在for...of循环是过滤掉return的

2、*的位置有4中，function* hello() function * hello() function *hello() function*hello()

3、yield*  数组，由于数组原生支持遍历器，因此会遍历数组成员

第十四章：Promise
   1.promise可以讲一下原型里面的promise使用情况

第十五章：Class  封装、继承、多态
1、class 并不会像传统面向类的语言一样在声明时静态复制所有行为。如果你（有意或无意）修改或者替换了父“类”中的一个方法，那子“类”和所有实例都会受到影响，因为它们在定义时并没有进行复制，只是使用基于[[Prototype]] 的实时委托：

2、var a={a:1};
var b={b:2};
Object.setPrototypeOf(a,b);
设置了a.b=3;，但是不改变b对象b.b的值。只改变b对象原型上的值。

super(x,y);
this.color=color;  this只能在super后使用。




第十六章：Module


大家好，今天下午有ECMAScript6基础培训第一期分享，我给大家系统的讲解es6的语法，希望大家都来参加。
时间：2017-3-14 下午17:00-19:00
地点:华虹大厦401-403


第一讲：题外话
1、自我介绍
2、西安、广州的同学听不清楚、我没有讲明白，说一下，我可以再将一遍的
3、


1、为什么有这么一次培训？


1、整理知识点花费了比较多的时间
2、对于还没有学过es6的同学，也不用担心
3、希望通过几期的分享，大家都能掌握好语法基础，为以后学习3大新框架打基础。
